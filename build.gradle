plugins {
    id "com.jfrog.bintray" version "1.7.3"
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group 'pt.davidafsilva.apple'
version '1.0.1-SNAPSHOT'
description = "Simple Java API to operate on OSX keychain generic passwords Edit"
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

// add generated sources support
sourceSets {
    generated {
        java.srcDir "${buildDir}/generated-sources/"
    }
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}

/**
 * Compiles the enums
 */
task compileEnumGenerator(type: Exec) {
    def libsDir = new File(buildDir, "libs")
    def genSourcesDir = new File(buildDir, "generated-sources")
    if (!libsDir.exists()) libsDir.mkdirs()
    if (!genSourcesDir.exists()) genSourcesDir.mkdirs()

    commandLine 'gcc',
            '-arch',
            'i386',
            '-arch',
            'x86_64',
            '-mmacosx-version-min=10.5',
            '-framework',
            'Security',
            '-std=c99',
            '-pedantic',
            '-Wall',
            '-o',
            "${buildDir}/libs/generate_enums",
            "${projectDir}/src/main/c/generate_enums.c"
}

/**
 * Generates the enums Java code
 */
task generateEnums(type: Exec, dependsOn: compileEnumGenerator) {
    def genSources = new File(buildDir, "generated-sources/pt/davidafsilva/apple/")
    if (!genSources.exists()) genSources.mkdirs()
    def authType = genSources.absolutePath + '/OSXKeychainAuthenticationType.java'
    def protocolType = genSources.absolutePath + '/OSXKeychainProtocolType.java'

    commandLine "${buildDir}/libs/generate_enums", authType, protocolType
}

/**
 * Generates the JNI class headers
 */
task generateJniHeaders(type: JavaCompile, dependsOn: [generateEnums]) {
    classpath = sourceSets.main.compileClasspath
    destinationDir file("${buildDir}/generated/jni")
    source = sourceSets.main.java
    options.compilerArgs += [
            '-h', file("${projectDir}/src/main/c"),
            '-d', file("${buildDir}/generated/jni-tmp")
    ]
    doLast {
        delete file("${buildDir}/generated/jni-tmp")
    }
}

/**
 * Compiles the required SO library for the runtime
 */
task compileSoLibrary(type: Exec, dependsOn: generateJniHeaders) {
    def libsDir = new File(buildDir, "libs")
    if (!libsDir.exists()) libsDir.mkdirs()

    commandLine 'gcc',
            '-arch',
            'i386',
            '-arch',
            'x86_64',
            '-mmacosx-version-min=10.5',
            '-dynamiclib',
            '-framework',
            'CoreFoundation',
            '-framework',
            'JavaVM',
            '-framework',
            'Security',
            '-I',
            '/System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers',
            '-std=c99',
            '-pedantic',
            '-Wall',
            '-o',
            "${buildDir}/libs/osxkeychain.so",
            "${projectDir}/src/main/c/pt_davidafsilva_apple_OSXKeychain.c"
}
compileJava.finalizedBy(compileSoLibrary)

gradle.projectsEvaluated {
    compileJava.dependsOn(generateEnums)
    jar {
        from sourceSets.generated.output
        from "${buildDir}/libs/osxkeychain.so"
        from("${projectDir}/LICENSE") {
            rename "LICENSE", "META-INF/LICENSE.txt"
        }
        manifest.attributes(
                "Name": rootProject.name,
                "Implementation-Title": rootProject.name,
                "Implementation-Version": archiveVersion,
                "Implementation-Vendor": "David Silva"
        )
    }
}

// copy SO to test classpath
task copySoLib(type: Copy)
copySoLib {
    from "${buildDir}/libs/"
    into test.testClassesDirs.singleFile
    include('osxkeychain.so')
}
testClasses.finalizedBy(copySoLib)

/**
 * Generates source jar
 */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource, sourceSets.generated.allSource
}

/**
 * Generates javadoc jar
 */
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
javadoc {
    source = sourceSets.main.allSource + sourceSets.generated.allSource
}
artifacts {
    archives sourcesJar
    archives javadocJar
}

dependencies {
    // test
    testImplementation 'junit:junit:4.13.2'
}

// Maven publishing support
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                Node parent = asNode()

                // basic information
                parent.appendNode('name', project.name)
                parent.appendNode('description', project.description)
                parent.appendNode('url', 'https://github.com/davidafsilva/jkeychain')

                // license
                def licensesNode = new Node(parent, 'licenses')
                def licenseNode = new Node(licensesNode, 'license')
                licenseNode.appendNode("name", "BSD 2-Clause License")
                licenseNode.appendNode("url", "https://opensource.org/licenses/BSD-2-Clause")

                // developer
                def developersNode = new Node(parent, 'developers')
                def developerNode = new Node(developersNode, 'developer')
                developerNode.appendNode('id', 'davidafsilva')
                developerNode.appendNode('name', 'David Silva')
                developerNode.appendNode('email', 'david@davidafsilva.pt')
                developerNode.appendNode('organization', 'GitHub')
                developerNode.appendNode('organizationUrl', 'https://github.com/davidafsilva/')

                // scm
                def scmNode = new Node(parent, 'scm')
                scmNode.appendNode('connection', 'scm:git:git://github.com/davidafsilva/jkeychain.git')
                scmNode.appendNode('developerConnection', 'scm:git:git://github.com/davidafsilva/jkeychain.git')
                scmNode.appendNode('url', 'https://github.com/davidafsilva/jkeychain')
            }
        }
    }
}

// bintray configuration
bintray {
    user = 'davidafsilva'
    key = System.getenv('BINTRAY_TOKEN')
    publications = ['mavenJava']
    pkg {
        repo = "maven"
        name = project.name
        version {
            name = project.version
            desc = project.name + " version " + project.version
            vcsTag = project.name + "-" + project.version
            publish = true
            gpg {
                sign = true
                passphrase = System.getenv('PGP_KEY_PASSWD')
            }
            //mavenCentralSync {
            //    user = System.getenv('MVN_CENTRAL_USER_TOKEN')
            //    password = System.getenv('MVN_CENTRAL_PASSWD_TOKEN')
            //}
        }
    }
}
